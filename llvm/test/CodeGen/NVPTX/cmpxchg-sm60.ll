; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -march=nvptx64 -mcpu=sm_60 -mattr=+ptx50 | FileCheck %s --check-prefix=SM60
; RUN: %if ptxas %{ llc < %s -march=nvptx64 -mcpu=sm_60 -mattr=+ptx50 | %ptxas-verify -arch=sm_60 %}

define i8 @monotonic_monotonic_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB0_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB0_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB0_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB0_1;
; SM60-NEXT:  $L__BB0_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB1_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB1_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB1_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB1_1;
; SM60-NEXT:  $L__BB1_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB2_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB2_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB2_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB2_1;
; SM60-NEXT:  $L__BB2_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB3_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB3_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB3_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB3_1;
; SM60-NEXT:  $L__BB3_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB4_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB4_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB4_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB4_1;
; SM60-NEXT:  $L__BB4_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB5_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB5_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB5_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB5_1;
; SM60-NEXT:  $L__BB5_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB6_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB6_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB6_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB6_1;
; SM60-NEXT:  $L__BB6_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB7_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB7_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB7_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB7_1;
; SM60-NEXT:  $L__BB7_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_monotonic_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_monotonic_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_monotonic_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i8_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_monotonic_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB8_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB8_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB8_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB8_1;
; SM60-NEXT:  $L__BB8_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") monotonic monotonic
    ret i8 %new
}

define i8 @monotonic_acquire_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB9_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB9_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB9_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB9_1;
; SM60-NEXT:  $L__BB9_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB10_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB10_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB10_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB10_1;
; SM60-NEXT:  $L__BB10_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB11_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB11_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB11_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB11_1;
; SM60-NEXT:  $L__BB11_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB12_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB12_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB12_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB12_1;
; SM60-NEXT:  $L__BB12_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB13_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB13_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB13_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB13_1;
; SM60-NEXT:  $L__BB13_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB14_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB14_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB14_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB14_1;
; SM60-NEXT:  $L__BB14_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB15_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB15_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB15_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB15_1;
; SM60-NEXT:  $L__BB15_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB16_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB16_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB16_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB16_1;
; SM60-NEXT:  $L__BB16_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_acquire_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_acquire_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_acquire_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i8_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_acquire_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB17_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB17_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB17_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB17_1;
; SM60-NEXT:  $L__BB17_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") monotonic acquire
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB18_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB18_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB18_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB18_1;
; SM60-NEXT:  $L__BB18_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB19_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB19_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB19_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB19_1;
; SM60-NEXT:  $L__BB19_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB20_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB20_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB20_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB20_1;
; SM60-NEXT:  $L__BB20_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB21_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB21_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB21_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB21_1;
; SM60-NEXT:  $L__BB21_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB22_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB22_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB22_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB22_1;
; SM60-NEXT:  $L__BB22_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB23_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB23_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB23_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB23_1;
; SM60-NEXT:  $L__BB23_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB24_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB24_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB24_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB24_1;
; SM60-NEXT:  $L__BB24_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB25_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB25_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB25_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB25_1;
; SM60-NEXT:  $L__BB25_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") monotonic seq_cst
    ret i8 %new
}

define i8 @monotonic_seq_cst_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: monotonic_seq_cst_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [monotonic_seq_cst_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [monotonic_seq_cst_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB26_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB26_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB26_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB26_1;
; SM60-NEXT:  $L__BB26_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") monotonic seq_cst
    ret i8 %new
}

define i8 @acquire_monotonic_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB27_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB27_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB27_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB27_1;
; SM60-NEXT:  $L__BB27_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB28_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB28_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB28_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB28_1;
; SM60-NEXT:  $L__BB28_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB29_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB29_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB29_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB29_1;
; SM60-NEXT:  $L__BB29_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB30_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB30_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB30_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB30_1;
; SM60-NEXT:  $L__BB30_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB31_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB31_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB31_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB31_1;
; SM60-NEXT:  $L__BB31_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB32_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB32_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB32_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB32_1;
; SM60-NEXT:  $L__BB32_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB33_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB33_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB33_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB33_1;
; SM60-NEXT:  $L__BB33_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB34_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB34_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB34_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB34_1;
; SM60-NEXT:  $L__BB34_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") acquire monotonic
    ret i8 %new
}

define i8 @acquire_monotonic_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_monotonic_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_monotonic_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i8_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_monotonic_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB35_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB35_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB35_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB35_1;
; SM60-NEXT:  $L__BB35_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") acquire monotonic
    ret i8 %new
}

define i8 @acquire_acquire_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB36_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB36_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB36_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB36_1;
; SM60-NEXT:  $L__BB36_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB37_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB37_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB37_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB37_1;
; SM60-NEXT:  $L__BB37_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB38_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB38_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB38_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB38_1;
; SM60-NEXT:  $L__BB38_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB39_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB39_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB39_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB39_1;
; SM60-NEXT:  $L__BB39_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB40_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB40_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB40_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB40_1;
; SM60-NEXT:  $L__BB40_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB41_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB41_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB41_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB41_1;
; SM60-NEXT:  $L__BB41_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB42_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB42_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB42_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB42_1;
; SM60-NEXT:  $L__BB42_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB43_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB43_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB43_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB43_1;
; SM60-NEXT:  $L__BB43_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") acquire acquire
    ret i8 %new
}

define i8 @acquire_acquire_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_acquire_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_acquire_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i8_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_acquire_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB44_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB44_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB44_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r20, %r8;
; SM60-NEXT:    mov.b32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB44_1;
; SM60-NEXT:  $L__BB44_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") acquire acquire
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB45_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB45_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB45_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB45_1;
; SM60-NEXT:  $L__BB45_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB46_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB46_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB46_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB46_1;
; SM60-NEXT:  $L__BB46_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB47_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB47_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB47_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB47_1;
; SM60-NEXT:  $L__BB47_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB48_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB48_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB48_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB48_1;
; SM60-NEXT:  $L__BB48_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB49_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB49_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB49_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB49_1;
; SM60-NEXT:  $L__BB49_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB50_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB50_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB50_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB50_1;
; SM60-NEXT:  $L__BB50_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB51_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB51_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB51_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB51_1;
; SM60-NEXT:  $L__BB51_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB52_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB52_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB52_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB52_1;
; SM60-NEXT:  $L__BB52_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") acquire seq_cst
    ret i8 %new
}

define i8 @acquire_seq_cst_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acquire_seq_cst_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acquire_seq_cst_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acquire_seq_cst_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB53_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB53_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB53_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB53_1;
; SM60-NEXT:  $L__BB53_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") acquire seq_cst
    ret i8 %new
}

define i8 @release_monotonic_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB54_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB54_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB54_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB54_1;
; SM60-NEXT:  $L__BB54_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB55_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB55_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB55_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB55_1;
; SM60-NEXT:  $L__BB55_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB56_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB56_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB56_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB56_1;
; SM60-NEXT:  $L__BB56_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB57_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB57_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB57_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB57_1;
; SM60-NEXT:  $L__BB57_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB58_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB58_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB58_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB58_1;
; SM60-NEXT:  $L__BB58_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB59_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB59_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB59_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB59_1;
; SM60-NEXT:  $L__BB59_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB60_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB60_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB60_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB60_1;
; SM60-NEXT:  $L__BB60_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB61_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB61_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB61_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB61_1;
; SM60-NEXT:  $L__BB61_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") release monotonic
    ret i8 %new
}

define i8 @release_monotonic_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_monotonic_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_monotonic_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_monotonic_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB62_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB62_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB62_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB62_1;
; SM60-NEXT:  $L__BB62_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") release monotonic
    ret i8 %new
}

define i8 @release_acquire_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB63_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB63_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB63_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB63_1;
; SM60-NEXT:  $L__BB63_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB64_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB64_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB64_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB64_1;
; SM60-NEXT:  $L__BB64_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB65_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB65_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB65_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB65_1;
; SM60-NEXT:  $L__BB65_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB66_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB66_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB66_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB66_1;
; SM60-NEXT:  $L__BB66_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB67_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB67_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB67_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB67_1;
; SM60-NEXT:  $L__BB67_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB68_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB68_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB68_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB68_1;
; SM60-NEXT:  $L__BB68_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB69_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB69_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB69_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB69_1;
; SM60-NEXT:  $L__BB69_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB70_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB70_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB70_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB70_1;
; SM60-NEXT:  $L__BB70_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") release acquire
    ret i8 %new
}

define i8 @release_acquire_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_acquire_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_acquire_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_acquire_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB71_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB71_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB71_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB71_1;
; SM60-NEXT:  $L__BB71_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") release acquire
    ret i8 %new
}

define i8 @release_seq_cst_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB72_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB72_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB72_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB72_1;
; SM60-NEXT:  $L__BB72_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB73_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB73_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB73_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB73_1;
; SM60-NEXT:  $L__BB73_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB74_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB74_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB74_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB74_1;
; SM60-NEXT:  $L__BB74_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB75_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB75_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB75_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB75_1;
; SM60-NEXT:  $L__BB75_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB76_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB76_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB76_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB76_1;
; SM60-NEXT:  $L__BB76_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB77_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB77_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB77_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB77_1;
; SM60-NEXT:  $L__BB77_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB78_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB78_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB78_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB78_1;
; SM60-NEXT:  $L__BB78_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB79_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB79_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB79_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB79_1;
; SM60-NEXT:  $L__BB79_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") release seq_cst
    ret i8 %new
}

define i8 @release_seq_cst_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: release_seq_cst_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [release_seq_cst_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [release_seq_cst_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB80_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB80_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB80_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB80_1;
; SM60-NEXT:  $L__BB80_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") release seq_cst
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB81_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB81_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB81_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB81_1;
; SM60-NEXT:  $L__BB81_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB82_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB82_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB82_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB82_1;
; SM60-NEXT:  $L__BB82_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB83_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB83_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB83_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB83_1;
; SM60-NEXT:  $L__BB83_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB84_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB84_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB84_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB84_1;
; SM60-NEXT:  $L__BB84_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB85_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB85_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB85_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB85_1;
; SM60-NEXT:  $L__BB85_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB86_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB86_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB86_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB86_1;
; SM60-NEXT:  $L__BB86_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB87_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB87_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB87_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB87_1;
; SM60-NEXT:  $L__BB87_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB88_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB88_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB88_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB88_1;
; SM60-NEXT:  $L__BB88_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_monotonic_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_monotonic_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_monotonic_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_monotonic_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB89_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.b32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB89_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB89_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.b32 %p2, %r19, %r8;
; SM60-NEXT:    mov.b32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB89_1;
; SM60-NEXT:  $L__BB89_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") acq_rel monotonic
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB90_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB90_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB90_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB90_1;
; SM60-NEXT:  $L__BB90_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB91_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB91_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB91_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB91_1;
; SM60-NEXT:  $L__BB91_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB92_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB92_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB92_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB92_1;
; SM60-NEXT:  $L__BB92_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB93_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB93_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB93_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB93_1;
; SM60-NEXT:  $L__BB93_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB94_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB94_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB94_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB94_1;
; SM60-NEXT:  $L__BB94_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB95_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB95_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB95_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB95_1;
; SM60-NEXT:  $L__BB95_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB96_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB96_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB96_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB96_1;
; SM60-NEXT:  $L__BB96_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB97_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB97_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB97_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB97_1;
; SM60-NEXT:  $L__BB97_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_acquire_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_acquire_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_acquire_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_acquire_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB98_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB98_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB98_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB98_1;
; SM60-NEXT:  $L__BB98_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") acq_rel acquire
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB99_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB99_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB99_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB99_1;
; SM60-NEXT:  $L__BB99_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB100_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB100_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB100_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB100_1;
; SM60-NEXT:  $L__BB100_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB101_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB101_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB101_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB101_1;
; SM60-NEXT:  $L__BB101_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB102_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB102_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB102_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB102_1;
; SM60-NEXT:  $L__BB102_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB103_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB103_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB103_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB103_1;
; SM60-NEXT:  $L__BB103_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB104_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB104_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB104_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB104_1;
; SM60-NEXT:  $L__BB104_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB105_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB105_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB105_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB105_1;
; SM60-NEXT:  $L__BB105_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB106_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB106_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB106_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB106_1;
; SM60-NEXT:  $L__BB106_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") acq_rel seq_cst
    ret i8 %new
}

define i8 @acq_rel_seq_cst_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: acq_rel_seq_cst_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [acq_rel_seq_cst_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [acq_rel_seq_cst_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB107_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB107_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB107_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB107_1;
; SM60-NEXT:  $L__BB107_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") acq_rel seq_cst
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB108_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB108_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB108_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB108_1;
; SM60-NEXT:  $L__BB108_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB109_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB109_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB109_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB109_1;
; SM60-NEXT:  $L__BB109_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB110_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB110_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB110_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB110_1;
; SM60-NEXT:  $L__BB110_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB111_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB111_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB111_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB111_1;
; SM60-NEXT:  $L__BB111_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB112_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB112_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB112_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB112_1;
; SM60-NEXT:  $L__BB112_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB113_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB113_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB113_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB113_1;
; SM60-NEXT:  $L__BB113_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB114_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB114_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB114_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB114_1;
; SM60-NEXT:  $L__BB114_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB115_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB115_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB115_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB115_1;
; SM60-NEXT:  $L__BB115_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_monotonic_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_monotonic_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_monotonic_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_monotonic_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB116_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB116_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB116_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB116_1;
; SM60-NEXT:  $L__BB116_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") seq_cst monotonic
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB117_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB117_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB117_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB117_1;
; SM60-NEXT:  $L__BB117_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB118_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB118_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB118_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB118_1;
; SM60-NEXT:  $L__BB118_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB119_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB119_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB119_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB119_1;
; SM60-NEXT:  $L__BB119_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB120_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB120_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB120_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB120_1;
; SM60-NEXT:  $L__BB120_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB121_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB121_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB121_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB121_1;
; SM60-NEXT:  $L__BB121_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB122_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB122_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB122_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB122_1;
; SM60-NEXT:  $L__BB122_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB123_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB123_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB123_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB123_1;
; SM60-NEXT:  $L__BB123_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB124_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB124_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB124_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB124_1;
; SM60-NEXT:  $L__BB124_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_acquire_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_acquire_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_acquire_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_acquire_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB125_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB125_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB125_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB125_1;
; SM60-NEXT:  $L__BB125_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") seq_cst acquire
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_generic_sys(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_generic_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB126_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB126_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB126_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB126_1;
; SM60-NEXT:  $L__BB126_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_generic_cta(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_generic_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB127_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB127_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB127_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB127_1;
; SM60-NEXT:  $L__BB127_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("block") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_generic_gpu(ptr %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_generic_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB128_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB128_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB128_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB128_1;
; SM60-NEXT:  $L__BB128_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i8 %cmp, i8 %new syncscope("device") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_global_sys(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_global_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB129_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB129_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB129_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB129_1;
; SM60-NEXT:  $L__BB129_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_global_cta(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_global_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB130_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB130_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB130_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB130_1;
; SM60-NEXT:  $L__BB130_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("block") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_global_gpu(ptr addrspace(1) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_global_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.global.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB131_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB131_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB131_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB131_1;
; SM60-NEXT:  $L__BB131_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i8 %cmp, i8 %new syncscope("device") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_shared_sys(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_shared_sys_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB132_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB132_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB132_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB132_1;
; SM60-NEXT:  $L__BB132_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_shared_cta(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_shared_cta_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB133_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB133_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB133_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB133_1;
; SM60-NEXT:  $L__BB133_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("block") seq_cst seq_cst
    ret i8 %new
}

define i8 @seq_cst_seq_cst_i8_shared_gpu(ptr addrspace(3) %addr, i8 %cmp, i8 %new) {
; SM60-LABEL: seq_cst_seq_cst_i8_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<21>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u8 %rs1, [seq_cst_seq_cst_i8_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i8_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r9, %rd2;
; SM60-NEXT:    and.b32 %r10, %r9, 3;
; SM60-NEXT:    shl.b32 %r1, %r10, 3;
; SM60-NEXT:    mov.b32 %r11, 255;
; SM60-NEXT:    shl.b32 %r12, %r11, %r1;
; SM60-NEXT:    not.b32 %r2, %r12;
; SM60-NEXT:    cvt.u32.u16 %r13, %rs1;
; SM60-NEXT:    and.b32 %r14, %r13, 255;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    ld.param.u8 %r15, [seq_cst_seq_cst_i8_shared_gpu_param_1];
; SM60-NEXT:    shl.b32 %r4, %r15, %r1;
; SM60-NEXT:    ld.shared.u32 %r16, [%rd1];
; SM60-NEXT:    and.b32 %r20, %r16, %r2;
; SM60-NEXT:  $L__BB134_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r17, %r20, %r3;
; SM60-NEXT:    or.b32 %r18, %r20, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r18, %r17;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r18;
; SM60-NEXT:    @%p1 bra $L__BB134_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB134_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r20, %r8;
; SM60-NEXT:    mov.u32 %r20, %r8;
; SM60-NEXT:    @%p2 bra $L__BB134_1;
; SM60-NEXT:  $L__BB134_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r13;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i8 %cmp, i8 %new syncscope("device") seq_cst seq_cst
    ret i8 %new
}

define i16 @monotonic_monotonic_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_generic_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB135_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB135_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB135_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB135_1;
; SM60-NEXT:  $L__BB135_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_generic_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB136_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB136_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB136_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB136_1;
; SM60-NEXT:  $L__BB136_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_generic_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB137_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB137_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB137_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB137_1;
; SM60-NEXT:  $L__BB137_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_global_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB138_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB138_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB138_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB138_1;
; SM60-NEXT:  $L__BB138_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_global_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB139_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB139_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB139_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB139_1;
; SM60-NEXT:  $L__BB139_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_global_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB140_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB140_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB140_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB140_1;
; SM60-NEXT:  $L__BB140_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_shared_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB141_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB141_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB141_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB141_1;
; SM60-NEXT:  $L__BB141_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_shared_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB142_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB142_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB142_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB142_1;
; SM60-NEXT:  $L__BB142_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_monotonic_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_monotonic_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_monotonic_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i16_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_monotonic_i16_shared_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB143_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB143_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB143_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB143_1;
; SM60-NEXT:  $L__BB143_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") monotonic monotonic
    ret i16 %new
}

define i16 @monotonic_acquire_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_generic_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB144_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB144_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB144_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB144_1;
; SM60-NEXT:  $L__BB144_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_generic_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB145_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB145_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB145_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB145_1;
; SM60-NEXT:  $L__BB145_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_generic_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB146_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB146_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB146_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB146_1;
; SM60-NEXT:  $L__BB146_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_global_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB147_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB147_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB147_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB147_1;
; SM60-NEXT:  $L__BB147_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_global_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB148_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB148_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB148_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB148_1;
; SM60-NEXT:  $L__BB148_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_global_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB149_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB149_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB149_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB149_1;
; SM60-NEXT:  $L__BB149_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_shared_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB150_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB150_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB150_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB150_1;
; SM60-NEXT:  $L__BB150_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_shared_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB151_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB151_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB151_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB151_1;
; SM60-NEXT:  $L__BB151_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_acquire_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_acquire_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_acquire_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i16_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_acquire_i16_shared_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB152_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB152_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB152_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB152_1;
; SM60-NEXT:  $L__BB152_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") monotonic acquire
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB153_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB153_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB153_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB153_1;
; SM60-NEXT:  $L__BB153_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB154_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB154_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB154_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB154_1;
; SM60-NEXT:  $L__BB154_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB155_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB155_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB155_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB155_1;
; SM60-NEXT:  $L__BB155_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB156_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB156_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB156_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB156_1;
; SM60-NEXT:  $L__BB156_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB157_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB157_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB157_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB157_1;
; SM60-NEXT:  $L__BB157_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB158_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB158_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB158_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB158_1;
; SM60-NEXT:  $L__BB158_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB159_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB159_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB159_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB159_1;
; SM60-NEXT:  $L__BB159_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB160_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB160_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB160_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB160_1;
; SM60-NEXT:  $L__BB160_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") monotonic seq_cst
    ret i16 %new
}

define i16 @monotonic_seq_cst_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: monotonic_seq_cst_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [monotonic_seq_cst_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [monotonic_seq_cst_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB161_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB161_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB161_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB161_1;
; SM60-NEXT:  $L__BB161_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") monotonic seq_cst
    ret i16 %new
}

define i16 @acquire_monotonic_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_generic_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB162_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB162_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB162_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB162_1;
; SM60-NEXT:  $L__BB162_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_generic_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB163_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB163_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB163_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB163_1;
; SM60-NEXT:  $L__BB163_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_generic_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB164_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB164_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB164_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB164_1;
; SM60-NEXT:  $L__BB164_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_global_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB165_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB165_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB165_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB165_1;
; SM60-NEXT:  $L__BB165_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_global_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB166_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB166_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB166_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB166_1;
; SM60-NEXT:  $L__BB166_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_global_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB167_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB167_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB167_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB167_1;
; SM60-NEXT:  $L__BB167_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_shared_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB168_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB168_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB168_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB168_1;
; SM60-NEXT:  $L__BB168_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_shared_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB169_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB169_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB169_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB169_1;
; SM60-NEXT:  $L__BB169_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") acquire monotonic
    ret i16 %new
}

define i16 @acquire_monotonic_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_monotonic_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_monotonic_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i16_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_monotonic_i16_shared_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB170_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB170_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB170_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB170_1;
; SM60-NEXT:  $L__BB170_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") acquire monotonic
    ret i16 %new
}

define i16 @acquire_acquire_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_generic_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_generic_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB171_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB171_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB171_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB171_1;
; SM60-NEXT:  $L__BB171_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_generic_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_generic_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB172_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB172_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB172_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB172_1;
; SM60-NEXT:  $L__BB172_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_generic_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_generic_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB173_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB173_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB173_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB173_1;
; SM60-NEXT:  $L__BB173_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_global_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_global_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB174_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB174_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB174_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB174_1;
; SM60-NEXT:  $L__BB174_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_global_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_global_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB175_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB175_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB175_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB175_1;
; SM60-NEXT:  $L__BB175_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_global_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_global_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB176_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB176_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB176_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB176_1;
; SM60-NEXT:  $L__BB176_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_shared_sys_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_shared_sys_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB177_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB177_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB177_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB177_1;
; SM60-NEXT:  $L__BB177_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_shared_cta_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_shared_cta_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB178_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB178_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB178_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB178_1;
; SM60-NEXT:  $L__BB178_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") acquire acquire
    ret i16 %new
}

define i16 @acquire_acquire_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_acquire_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_acquire_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i16_shared_gpu_param_0];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_acquire_i16_shared_gpu_param_1];
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB179_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB179_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB179_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB179_1;
; SM60-NEXT:  $L__BB179_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") acquire acquire
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB180_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB180_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB180_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB180_1;
; SM60-NEXT:  $L__BB180_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB181_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB181_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB181_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB181_1;
; SM60-NEXT:  $L__BB181_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB182_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB182_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB182_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB182_1;
; SM60-NEXT:  $L__BB182_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB183_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB183_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB183_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB183_1;
; SM60-NEXT:  $L__BB183_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB184_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB184_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB184_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB184_1;
; SM60-NEXT:  $L__BB184_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB185_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB185_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB185_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB185_1;
; SM60-NEXT:  $L__BB185_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB186_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB186_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB186_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB186_1;
; SM60-NEXT:  $L__BB186_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB187_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB187_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB187_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB187_1;
; SM60-NEXT:  $L__BB187_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") acquire seq_cst
    ret i16 %new
}

define i16 @acquire_seq_cst_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acquire_seq_cst_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acquire_seq_cst_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acquire_seq_cst_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB188_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB188_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB188_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB188_1;
; SM60-NEXT:  $L__BB188_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") acquire seq_cst
    ret i16 %new
}

define i16 @release_monotonic_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB189_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB189_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB189_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB189_1;
; SM60-NEXT:  $L__BB189_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB190_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB190_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB190_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB190_1;
; SM60-NEXT:  $L__BB190_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB191_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB191_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB191_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB191_1;
; SM60-NEXT:  $L__BB191_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB192_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB192_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB192_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB192_1;
; SM60-NEXT:  $L__BB192_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB193_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB193_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB193_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB193_1;
; SM60-NEXT:  $L__BB193_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB194_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB194_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB194_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB194_1;
; SM60-NEXT:  $L__BB194_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB195_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB195_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB195_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB195_1;
; SM60-NEXT:  $L__BB195_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB196_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB196_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB196_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB196_1;
; SM60-NEXT:  $L__BB196_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") release monotonic
    ret i16 %new
}

define i16 @release_monotonic_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_monotonic_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_monotonic_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_monotonic_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB197_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB197_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB197_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB197_1;
; SM60-NEXT:  $L__BB197_3: // %partword.cmpxchg.end
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") release monotonic
    ret i16 %new
}

define i16 @release_acquire_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB198_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB198_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB198_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB198_1;
; SM60-NEXT:  $L__BB198_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB199_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB199_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB199_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB199_1;
; SM60-NEXT:  $L__BB199_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB200_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB200_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB200_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB200_1;
; SM60-NEXT:  $L__BB200_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB201_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB201_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB201_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB201_1;
; SM60-NEXT:  $L__BB201_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB202_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB202_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB202_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB202_1;
; SM60-NEXT:  $L__BB202_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB203_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB203_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB203_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB203_1;
; SM60-NEXT:  $L__BB203_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB204_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB204_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB204_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB204_1;
; SM60-NEXT:  $L__BB204_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB205_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB205_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB205_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB205_1;
; SM60-NEXT:  $L__BB205_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") release acquire
    ret i16 %new
}

define i16 @release_acquire_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_acquire_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_acquire_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_acquire_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB206_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB206_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB206_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB206_1;
; SM60-NEXT:  $L__BB206_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") release acquire
    ret i16 %new
}

define i16 @release_seq_cst_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB207_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB207_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB207_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB207_1;
; SM60-NEXT:  $L__BB207_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB208_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB208_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB208_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB208_1;
; SM60-NEXT:  $L__BB208_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB209_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB209_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB209_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB209_1;
; SM60-NEXT:  $L__BB209_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB210_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB210_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB210_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB210_1;
; SM60-NEXT:  $L__BB210_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB211_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB211_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB211_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB211_1;
; SM60-NEXT:  $L__BB211_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB212_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB212_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB212_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB212_1;
; SM60-NEXT:  $L__BB212_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB213_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB213_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB213_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB213_1;
; SM60-NEXT:  $L__BB213_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB214_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB214_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB214_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB214_1;
; SM60-NEXT:  $L__BB214_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") release seq_cst
    ret i16 %new
}

define i16 @release_seq_cst_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: release_seq_cst_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [release_seq_cst_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [release_seq_cst_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB215_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB215_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB215_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB215_1;
; SM60-NEXT:  $L__BB215_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") release seq_cst
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB216_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB216_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB216_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB216_1;
; SM60-NEXT:  $L__BB216_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB217_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB217_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB217_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB217_1;
; SM60-NEXT:  $L__BB217_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB218_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB218_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB218_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB218_1;
; SM60-NEXT:  $L__BB218_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB219_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB219_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB219_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB219_1;
; SM60-NEXT:  $L__BB219_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB220_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB220_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB220_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB220_1;
; SM60-NEXT:  $L__BB220_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB221_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB221_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB221_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB221_1;
; SM60-NEXT:  $L__BB221_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB222_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB222_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB222_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB222_1;
; SM60-NEXT:  $L__BB222_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB223_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB223_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB223_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB223_1;
; SM60-NEXT:  $L__BB223_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_monotonic_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_monotonic_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_monotonic_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_monotonic_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB224_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB224_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB224_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB224_1;
; SM60-NEXT:  $L__BB224_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") acq_rel monotonic
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB225_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB225_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB225_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB225_1;
; SM60-NEXT:  $L__BB225_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB226_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB226_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB226_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB226_1;
; SM60-NEXT:  $L__BB226_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB227_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB227_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB227_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB227_1;
; SM60-NEXT:  $L__BB227_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB228_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB228_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB228_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB228_1;
; SM60-NEXT:  $L__BB228_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB229_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB229_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB229_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB229_1;
; SM60-NEXT:  $L__BB229_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB230_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB230_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB230_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB230_1;
; SM60-NEXT:  $L__BB230_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB231_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB231_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB231_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB231_1;
; SM60-NEXT:  $L__BB231_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB232_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB232_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB232_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB232_1;
; SM60-NEXT:  $L__BB232_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_acquire_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_acquire_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_acquire_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_acquire_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB233_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB233_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB233_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB233_1;
; SM60-NEXT:  $L__BB233_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") acq_rel acquire
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB234_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB234_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB234_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB234_1;
; SM60-NEXT:  $L__BB234_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB235_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB235_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB235_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB235_1;
; SM60-NEXT:  $L__BB235_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB236_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB236_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB236_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB236_1;
; SM60-NEXT:  $L__BB236_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB237_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB237_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB237_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB237_1;
; SM60-NEXT:  $L__BB237_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB238_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB238_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB238_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB238_1;
; SM60-NEXT:  $L__BB238_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB239_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB239_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB239_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB239_1;
; SM60-NEXT:  $L__BB239_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB240_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB240_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB240_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB240_1;
; SM60-NEXT:  $L__BB240_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB241_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB241_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB241_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB241_1;
; SM60-NEXT:  $L__BB241_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") acq_rel seq_cst
    ret i16 %new
}

define i16 @acq_rel_seq_cst_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: acq_rel_seq_cst_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [acq_rel_seq_cst_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [acq_rel_seq_cst_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB242_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB242_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB242_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB242_1;
; SM60-NEXT:  $L__BB242_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") acq_rel seq_cst
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB243_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB243_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB243_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB243_1;
; SM60-NEXT:  $L__BB243_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB244_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB244_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB244_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB244_1;
; SM60-NEXT:  $L__BB244_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB245_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB245_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB245_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB245_1;
; SM60-NEXT:  $L__BB245_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB246_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB246_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB246_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB246_1;
; SM60-NEXT:  $L__BB246_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB247_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB247_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB247_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB247_1;
; SM60-NEXT:  $L__BB247_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB248_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB248_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB248_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB248_1;
; SM60-NEXT:  $L__BB248_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB249_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB249_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB249_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB249_1;
; SM60-NEXT:  $L__BB249_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB250_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB250_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB250_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB250_1;
; SM60-NEXT:  $L__BB250_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_monotonic_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_monotonic_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_monotonic_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_monotonic_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB251_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB251_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB251_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB251_1;
; SM60-NEXT:  $L__BB251_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") seq_cst monotonic
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB252_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB252_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB252_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB252_1;
; SM60-NEXT:  $L__BB252_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB253_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB253_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB253_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB253_1;
; SM60-NEXT:  $L__BB253_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB254_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB254_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB254_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB254_1;
; SM60-NEXT:  $L__BB254_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB255_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB255_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB255_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB255_1;
; SM60-NEXT:  $L__BB255_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB256_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB256_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB256_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB256_1;
; SM60-NEXT:  $L__BB256_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB257_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB257_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB257_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB257_1;
; SM60-NEXT:  $L__BB257_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB258_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB258_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB258_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB258_1;
; SM60-NEXT:  $L__BB258_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB259_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB259_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB259_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB259_1;
; SM60-NEXT:  $L__BB259_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_acquire_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_acquire_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_acquire_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_acquire_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB260_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB260_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB260_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB260_1;
; SM60-NEXT:  $L__BB260_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") seq_cst acquire
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_generic_sys(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_generic_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_generic_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB261_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB261_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB261_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB261_1;
; SM60-NEXT:  $L__BB261_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_generic_cta(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_generic_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_generic_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB262_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB262_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB262_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB262_1;
; SM60-NEXT:  $L__BB262_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("block") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_generic_gpu(ptr %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_generic_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_generic_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB263_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB263_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB263_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB263_1;
; SM60-NEXT:  $L__BB263_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i16 %cmp, i16 %new syncscope("device") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_global_sys(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_global_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_global_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB264_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB264_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB264_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB264_1;
; SM60-NEXT:  $L__BB264_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_global_cta(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_global_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_global_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB265_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB265_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB265_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB265_1;
; SM60-NEXT:  $L__BB265_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("block") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_global_gpu(ptr addrspace(1) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_global_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_global_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.global.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB266_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.global.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB266_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB266_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB266_1;
; SM60-NEXT:  $L__BB266_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i16 %cmp, i16 %new syncscope("device") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_shared_sys(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_shared_sys_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_shared_sys_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB267_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB267_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB267_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB267_1;
; SM60-NEXT:  $L__BB267_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_shared_cta(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_shared_cta_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_shared_cta_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB268_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB268_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB268_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB268_1;
; SM60-NEXT:  $L__BB268_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("block") seq_cst seq_cst
    ret i16 %new
}

define i16 @seq_cst_seq_cst_i16_shared_gpu(ptr addrspace(3) %addr, i16 %cmp, i16 %new) {
; SM60-LABEL: seq_cst_seq_cst_i16_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .pred %p<3>;
; SM60-NEXT:    .reg .b16 %rs<2>;
; SM60-NEXT:    .reg .b32 %r<20>;
; SM60-NEXT:    .reg .b64 %rd<3>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u16 %rs1, [seq_cst_seq_cst_i16_shared_gpu_param_2];
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i16_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u16 %r9, [seq_cst_seq_cst_i16_shared_gpu_param_1];
; SM60-NEXT:    and.b64 %rd1, %rd2, -4;
; SM60-NEXT:    cvt.u32.u64 %r10, %rd2;
; SM60-NEXT:    and.b32 %r11, %r10, 3;
; SM60-NEXT:    shl.b32 %r1, %r11, 3;
; SM60-NEXT:    mov.b32 %r12, 65535;
; SM60-NEXT:    shl.b32 %r13, %r12, %r1;
; SM60-NEXT:    not.b32 %r2, %r13;
; SM60-NEXT:    cvt.u32.u16 %r14, %rs1;
; SM60-NEXT:    shl.b32 %r3, %r14, %r1;
; SM60-NEXT:    shl.b32 %r4, %r9, %r1;
; SM60-NEXT:    ld.shared.u32 %r15, [%rd1];
; SM60-NEXT:    and.b32 %r19, %r15, %r2;
; SM60-NEXT:  $L__BB269_1: // %partword.cmpxchg.loop
; SM60-NEXT:    // =>This Inner Loop Header: Depth=1
; SM60-NEXT:    or.b32 %r16, %r19, %r3;
; SM60-NEXT:    or.b32 %r17, %r19, %r4;
; SM60-NEXT:    atom.shared.cas.b32 %r7, [%rd1], %r17, %r16;
; SM60-NEXT:    setp.eq.s32 %p1, %r7, %r17;
; SM60-NEXT:    @%p1 bra $L__BB269_3;
; SM60-NEXT:  // %bb.2: // %partword.cmpxchg.failure
; SM60-NEXT:    // in Loop: Header=BB269_1 Depth=1
; SM60-NEXT:    and.b32 %r8, %r7, %r2;
; SM60-NEXT:    setp.ne.s32 %p2, %r19, %r8;
; SM60-NEXT:    mov.u32 %r19, %r8;
; SM60-NEXT:    @%p2 bra $L__BB269_1;
; SM60-NEXT:  $L__BB269_3: // %partword.cmpxchg.end
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    st.param.b32 [func_retval0], %r14;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i16 %cmp, i16 %new syncscope("device") seq_cst seq_cst
    ret i16 %new
}

define i32 @monotonic_monotonic_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_monotonic_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_monotonic_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_monotonic_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_monotonic_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") monotonic monotonic
    ret i32 %new
}

define i32 @monotonic_acquire_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_acquire_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_acquire_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_acquire_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_acquire_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") monotonic acquire
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") monotonic seq_cst
    ret i32 %new
}

define i32 @monotonic_seq_cst_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: monotonic_seq_cst_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [monotonic_seq_cst_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [monotonic_seq_cst_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") monotonic seq_cst
    ret i32 %new
}

define i32 @acquire_monotonic_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") acquire monotonic
    ret i32 %new
}

define i32 @acquire_monotonic_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_monotonic_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_monotonic_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_monotonic_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") acquire monotonic
    ret i32 %new
}

define i32 @acquire_acquire_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") acquire acquire
    ret i32 %new
}

define i32 @acquire_acquire_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_acquire_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acquire_acquire_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_acquire_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") acquire acquire
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") acquire seq_cst
    ret i32 %new
}

define i32 @acquire_seq_cst_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acquire_seq_cst_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [acquire_seq_cst_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acquire_seq_cst_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") acquire seq_cst
    ret i32 %new
}

define i32 @release_monotonic_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") release monotonic
    ret i32 %new
}

define i32 @release_monotonic_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_monotonic_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_monotonic_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_monotonic_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") release monotonic
    ret i32 %new
}

define i32 @release_acquire_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") release acquire
    ret i32 %new
}

define i32 @release_acquire_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_acquire_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [release_acquire_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_acquire_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") release acquire
    ret i32 %new
}

define i32 @release_seq_cst_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") release seq_cst
    ret i32 %new
}

define i32 @release_seq_cst_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: release_seq_cst_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [release_seq_cst_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [release_seq_cst_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") release seq_cst
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_monotonic_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_monotonic_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_monotonic_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_monotonic_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") acq_rel monotonic
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_generic_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_generic_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_global_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_global_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_global_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_shared_sys_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_shared_cta_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_acquire_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_acquire_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i32_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_acquire_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_acquire_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") acq_rel acquire
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") acq_rel seq_cst
    ret i32 %new
}

define i32 @acq_rel_seq_cst_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: acq_rel_seq_cst_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [acq_rel_seq_cst_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [acq_rel_seq_cst_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") acq_rel seq_cst
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_monotonic_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_monotonic_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_monotonic_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_monotonic_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") seq_cst monotonic
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_acquire_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_acquire_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_acquire_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_acquire_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") seq_cst acquire
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_generic_sys(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_generic_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_generic_cta(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_generic_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("block") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_generic_gpu(ptr %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i32 %cmp, i32 %new syncscope("device") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_global_sys(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_global_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_global_cta(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_global_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("block") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_global_gpu(ptr addrspace(1) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_global_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i32 %cmp, i32 %new syncscope("device") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_shared_sys(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_shared_sys_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_shared_cta(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_shared_cta_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("block") seq_cst seq_cst
    ret i32 %new
}

define i32 @seq_cst_seq_cst_i32_shared_gpu(ptr addrspace(3) %addr, i32 %cmp, i32 %new) {
; SM60-LABEL: seq_cst_seq_cst_i32_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b32 %r<4>;
; SM60-NEXT:    .reg .b64 %rd<2>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i32_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u32 %r1, [seq_cst_seq_cst_i32_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u32 %r2, [seq_cst_seq_cst_i32_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b32 %r3, [%rd1], %r1, %r2;
; SM60-NEXT:    st.param.b32 [func_retval0], %r2;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i32 %cmp, i32 %new syncscope("device") seq_cst seq_cst
    ret i32 %new
}

define i64 @monotonic_monotonic_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_monotonic_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_monotonic_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_monotonic_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_monotonic_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_monotonic_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") monotonic monotonic
    ret i64 %new
}

define i64 @monotonic_acquire_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_acquire_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_acquire_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_acquire_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_acquire_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_acquire_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") monotonic acquire
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") monotonic seq_cst
    ret i64 %new
}

define i64 @monotonic_seq_cst_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: monotonic_seq_cst_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [monotonic_seq_cst_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [monotonic_seq_cst_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [monotonic_seq_cst_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") monotonic seq_cst
    ret i64 %new
}

define i64 @acquire_monotonic_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") acquire monotonic
    ret i64 %new
}

define i64 @acquire_monotonic_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_monotonic_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_monotonic_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_monotonic_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_monotonic_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") acquire monotonic
    ret i64 %new
}

define i64 @acquire_acquire_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") acquire acquire
    ret i64 %new
}

define i64 @acquire_acquire_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_acquire_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_acquire_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_acquire_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_acquire_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") acquire acquire
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") acquire seq_cst
    ret i64 %new
}

define i64 @acquire_seq_cst_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acquire_seq_cst_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acquire_seq_cst_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [acquire_seq_cst_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acquire_seq_cst_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") acquire seq_cst
    ret i64 %new
}

define i64 @release_monotonic_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") release monotonic
    ret i64 %new
}

define i64 @release_monotonic_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_monotonic_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_monotonic_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_monotonic_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_monotonic_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") release monotonic
    ret i64 %new
}

define i64 @release_acquire_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") release acquire
    ret i64 %new
}

define i64 @release_acquire_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_acquire_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_acquire_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [release_acquire_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_acquire_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") release acquire
    ret i64 %new
}

define i64 @release_seq_cst_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") release seq_cst
    ret i64 %new
}

define i64 @release_seq_cst_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: release_seq_cst_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [release_seq_cst_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [release_seq_cst_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [release_seq_cst_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") release seq_cst
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_monotonic_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_monotonic_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_monotonic_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_monotonic_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_monotonic_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") acq_rel monotonic
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_generic_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_generic_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_generic_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_global_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_global_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_global_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_shared_sys_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_shared_cta_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_acquire_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_acquire_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_acquire_i64_shared_gpu_param_0];
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_acquire_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_acquire_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") acq_rel acquire
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") acq_rel seq_cst
    ret i64 %new
}

define i64 @acq_rel_seq_cst_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: acq_rel_seq_cst_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [acq_rel_seq_cst_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [acq_rel_seq_cst_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [acq_rel_seq_cst_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") acq_rel seq_cst
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_monotonic_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_monotonic_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_monotonic_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_monotonic_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_monotonic_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") seq_cst monotonic
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_acquire_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_acquire_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_acquire_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_acquire_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_acquire_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") seq_cst acquire
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_generic_sys(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_generic_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_generic_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_generic_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_generic_sys_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_generic_cta(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_generic_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_generic_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_generic_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_generic_cta_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("block") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_generic_gpu(ptr %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_generic_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_generic_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_generic_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_generic_gpu_param_2];
; SM60-NEXT:    atom.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr %addr, i64 %cmp, i64 %new syncscope("device") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_global_sys(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_global_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_global_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_global_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_global_sys_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_global_cta(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_global_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_global_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_global_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_global_cta_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("block") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_global_gpu(ptr addrspace(1) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_global_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_global_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_global_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_global_gpu_param_2];
; SM60-NEXT:    atom.global.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(1) %addr, i64 %cmp, i64 %new syncscope("device") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_shared_sys(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_shared_sys(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_shared_sys_param_0];
; SM60-NEXT:    membar.sys;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_shared_sys_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_shared_sys_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_shared_cta(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_shared_cta(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_shared_cta_param_0];
; SM60-NEXT:    membar.cta;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_shared_cta_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_shared_cta_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("block") seq_cst seq_cst
    ret i64 %new
}

define i64 @seq_cst_seq_cst_i64_shared_gpu(ptr addrspace(3) %addr, i64 %cmp, i64 %new) {
; SM60-LABEL: seq_cst_seq_cst_i64_shared_gpu(
; SM60:       {
; SM60-NEXT:    .reg .b64 %rd<5>;
; SM60-EMPTY:
; SM60-NEXT:  // %bb.0:
; SM60-NEXT:    ld.param.u64 %rd1, [seq_cst_seq_cst_i64_shared_gpu_param_0];
; SM60-NEXT:    membar.gl;
; SM60-NEXT:    ld.param.u64 %rd2, [seq_cst_seq_cst_i64_shared_gpu_param_1];
; SM60-NEXT:    ld.param.u64 %rd3, [seq_cst_seq_cst_i64_shared_gpu_param_2];
; SM60-NEXT:    atom.shared.cas.b64 %rd4, [%rd1], %rd2, %rd3;
; SM60-NEXT:    st.param.b64 [func_retval0], %rd3;
; SM60-NEXT:    ret;
    %pairold = cmpxchg ptr addrspace(3) %addr, i64 %cmp, i64 %new syncscope("device") seq_cst seq_cst
    ret i64 %new
}

